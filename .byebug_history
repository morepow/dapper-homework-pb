c
exit
BCrypt::Password.create(params[:password])
c
continue
BCrypt
BCrypt::Password.create(params[:password])
c
exit
signup_params
User.create_with_password(signup_params)
n
c
exit
User.create_with_password(signup_params[:email], signup_params[:password])
n
exit
n
signup_params[:email]
exit
signup_params
params
c
User.all.map{ |user| { email: user['email'], firstName: user['first_name'], lastName: user['last_name'] } }
exit
u.last_name
u.first_name
u = User.first
User.first
User.all.map{ |user| { email: user.email, firstName: user.first_name, lastName: user.lastName } }
User.all
Token.valid_token?(request.headers['x-authentication-token'])
request.headers['x-authentication-token']
exit
c
exit
user.reload
user
exit
data
exit
user_params
print request.body
request.body.print
request.body.to_s
request.body
request
params
user_params[:first_name]
user_params[:first_ame]
user_params[:firstName]
user
c
exit
user_id[0]['user_id']
user_id
user.valid_user_token?(request.headers['x-authentication-token'])
c
Token.valid_token?(request.headers['x-authentication-token'])
c
token.decode
 token = Token.find_by_token(request.headers['x-authentication-token'])
exit
User.find_by_email('test@test.io').id
user
user.id
exit
user_id = token.decode
 token = Token.find_by_token(request.headers['x-authentication-token'])
token.decode
 Token.find_by_token(request.headers['x-authentication-token'])
c
exit
Token.find_by_token(request.headers['x-authentication-token'])
c
Token.valid_token?(request.headers['x-authentication-token'])
exit
Token.find_by_token(request.headers['x-authentication-token'])
Token.valid_token?(request.headers['x-authentication-token'])
request.headers['x-authentication-token']
Token.valid_token?(request.headers['x-authentication-token'])
exit
request.headers['x-authentication-token']
Token.valid_token?(request.headers['x-authentication-token'])
c
request.headers['x-authorization-token']
request.headers['HTTP_X_AUTHORIZATION_TOKEN']
request.headers['X_AUTHORIZATION_TOKEN']
request.headers
exit
request.headers
c
ENV
headers
request
exit
header 'x-authorization-header', 'foo'
header 'x-authorization-header' 'foo'
header
env
enbv
@request
request
exit
request.headers['CONTENT-TYPE']
request.headers
request.headers.keys
request.headers['x-authorization-header']
request.headers
request.headers['x-authorization-token']
request.headers['x-authentication-token']
exit
user
User.find_by_email('test@test.io').id
User.find_by_email('test@test.io')
user.id
user
user.id
c
Token.create_token(user.id)
User.first
user.errors
user.save
user
exit
request.headers['x-authentication-token']
request.headers
